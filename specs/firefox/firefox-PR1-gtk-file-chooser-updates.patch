diff -Nur mozilla-1.7.3/widget/src/gtk2/nsFilePicker.cpp mozilla-1.7.3-gtkfilechooser/widget/src/gtk2/nsFilePicker.cpp
--- mozilla-1.7.3/widget/src/gtk2/nsFilePicker.cpp	2004-09-27 21:20:29.591113000 -0400
+++ mozilla-1.7.3-gtkfilechooser/widget/src/gtk2/nsFilePicker.cpp	2004-09-27 21:23:59.687806000 -0400
@@ -49,6 +49,7 @@
 #include "nsEnumeratorUtils.h"
 #include "nsNetUtil.h"
 #include "nsReadableUtils.h"
+#include "mozcontainer.h"
 
 #include "prmem.h"
 #include "prlink.h"
@@ -106,6 +107,28 @@
 DECL_FUNC_PTR(gtk_file_filter_add_pattern);
 DECL_FUNC_PTR(gtk_file_filter_set_name);
 
+static GtkWindow *
+get_gtk_window_for_nsiwidget(nsIWidget *widget)
+{
+  // Get native GdkWindow
+  GdkWindow *gdk_win = GDK_WINDOW(widget->GetNativeData(NS_NATIVE_WIDGET));
+  if (!gdk_win)
+    return NULL;
+
+  // Get the container
+  gpointer user_data = NULL;
+  gdk_window_get_user_data(gdk_win, &user_data);
+  if (!user_data)
+    return NULL;
+
+  // Make sure its really a container
+  MozContainer *parent_container = MOZ_CONTAINER(user_data);
+  if (!parent_container)
+    return NULL;
+
+  // Get its toplevel
+  return GTK_WINDOW(gtk_widget_get_toplevel(GTK_WIDGET(parent_container)));
+}
 
 static PRLibrary *
 LoadVersionedLibrary(const char* libName, const char* libVersion)
@@ -420,21 +443,20 @@
   nsXPIDLCString title;
   title.Adopt(ToNewUTF8String(mTitle));
 
-  GtkWidget *parent = (GtkWidget*)mParentWidget->GetNativeData(NS_NATIVE_WIDGET);
+  GtkWindow *parent_widget = get_gtk_window_for_nsiwidget(mParentWidget);
+
   GtkFileChooserAction action = GetGtkFileChooserAction(mMode);
   const gchar *accept_button = (mMode == GTK_FILE_CHOOSER_ACTION_SAVE)
                                ? GTK_STOCK_SAVE : GTK_STOCK_OPEN;
-
   GtkWidget *file_chooser =
-      _gtk_file_chooser_dialog_new(title, GTK_WINDOW(parent), action,
+      _gtk_file_chooser_dialog_new(title, parent_widget, action,
                                    GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
                                    accept_button, GTK_RESPONSE_ACCEPT,
                                    NULL);
+
   if (mMode == nsIFilePicker::modeOpenMultiple) {
     _gtk_file_chooser_set_select_multiple (GTK_FILE_CHOOSER(file_chooser), TRUE);
-  }
-
-  if (mMode == nsIFilePicker::modeSave) {
+  } else if (mMode == nsIFilePicker::modeSave) {
     char *default_filename = ToNewUTF8String(mDefault);
     _gtk_file_chooser_set_current_name(GTK_FILE_CHOOSER(file_chooser),
                                        NS_STATIC_CAST(const gchar*, default_filename));
@@ -455,45 +477,20 @@
                                          directory.get());
   }
 
-  PRInt32 count = mFilters.Count();
-  for (PRInt32 i = 0; i < count; ++i) {
-    GtkFileFilter *filter = _gtk_file_filter_new ();
-
+  int count = mFilters.Count();
+  for (int i = 0; i < count; ++i) {
     // This is fun... the GTK file picker does not accept a list of filters
     // so we need to split out each string, and add it manually.
-    nsCAutoString pattern_list;
-    pattern_list.Assign(*mFilters[i]);
-    nsCString::const_iterator start, end, cur;
-    pattern_list.BeginReading(start);
-    pattern_list.EndReading(end);
-
-    cur = start;
-    while (cur != end) {
-      // Look for our delimiter of '; ' (semi-colon space)
-      if (*cur == ';') {
-        ++cur;
-        if (*cur != ' ') {
-          NS_ERROR("The supplied filter is invalid.  Go read nsIFilePicker.");
-          #ifdef DEBUG
-          printf("The ill eagle filter: %s\n", mFilters[i]->get());
-          #endif
-          break;
-        }
-        --cur;
-        const char* pattern = ToNewCString(Substring(start, cur));
-        _gtk_file_filter_add_pattern(filter, pattern);
-        nsMemory::Free((void*)pattern);
-        ++cur; ++cur;
-        start = cur;
-      }
 
-      ++cur;
+    char **patterns = g_strsplit(mFilters[i]->get(), ";", -1);
+    if (!patterns) {
+      return NS_ERROR_UNEXPECTED;
     }
 
-    // Finally add the last one
-    const char *pattern = ToNewCString(Substring(start, end));
-    _gtk_file_filter_add_pattern(filter, pattern);
-    nsMemory::Free((void*)pattern);
+    GtkFileFilter *filter = _gtk_file_filter_new ();
+    for (int j = 0; patterns[j] != NULL; ++j) {
+      _gtk_file_filter_add_pattern (filter, g_strstrip (patterns[j]));
+    }
 
     if (!mFilterNames[i]->IsEmpty()) {
       // If we have a name for our filter, let's use that.
@@ -505,7 +502,7 @@
       _gtk_file_filter_set_name (filter, filter_pattern);
     }
 
-    _gtk_file_chooser_add_filter ((GtkFileChooser*) (file_chooser), filter);
+    _gtk_file_chooser_add_filter (GTK_FILE_CHOOSER (file_chooser), filter);
   }
 
   gint response = gtk_dialog_run (GTK_DIALOG (file_chooser));
diff -Nur mozilla-1.7.3/xpfe/components/filepicker/src/Makefile.in mozilla-1.7.3-gtkfilechooser/xpfe/components/filepicker/src/Makefile.in
--- mozilla-1.7.3/xpfe/components/filepicker/src/Makefile.in	2004-01-07 08:36:58.000000000 -0500
+++ mozilla-1.7.3-gtkfilechooser/xpfe/components/filepicker/src/Makefile.in	2004-09-27 21:22:45.208360000 -0400
@@ -56,3 +56,5 @@
 
 EXTRA_DSO_LDOPTS += $(MOZ_COMPONENT_LIBS)
 
+nsFilePicker.js: nsFilePicker.js.in
+	$(PERL) $(MOZILLA_DIR)/config/preprocessor.pl $(DEFINES) $(ACDEFINES) $^ > $@
diff -Nur mozilla-1.7.3/xpfe/components/filepicker/src/nsFilePicker.js mozilla-1.7.3-gtkfilechooser/xpfe/components/filepicker/src/nsFilePicker.js
--- mozilla-1.7.3/xpfe/components/filepicker/src/nsFilePicker.js	2004-03-10 00:33:14.000000000 -0500
+++ mozilla-1.7.3-gtkfilechooser/xpfe/components/filepicker/src/nsFilePicker.js	1969-12-31 19:00:00.000000000 -0500
@@ -1,315 +0,0 @@
-/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
- *
- * The contents of this file are subject to the Mozilla Public
- * License Version 1.1 (the "License"); you may not use this file
- * except in compliance with the License. You may obtain a copy of
- * the License at http://www.mozilla.org/MPL/
- * 
- * Software distributed under the License is distributed on an "AS
- * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
- * implied. See the License for the specific language governing
- * rights and limitations under the License.
- * 
- * The Original Code is mozilla.org code.
- * 
- * The Initial Developer of the Original Code is Netscape
- * Communications Corporation.  Portions created by Netscape are
- * Copyright (C) 2000 Netscape Communications Corporation.  All
- * Rights Reserved.
- * 
- * Contributor(s): Stuart Parmenter <pavlov@netscape.com>
- */
-
-/*
- * No magic constructor behaviour, as is de rigeur for XPCOM.
- * If you must perform some initialization, and it could possibly fail (even
- * due to an out-of-memory condition), you should use an Init method, which
- * can convey failure appropriately (thrown exception in JS,
- * NS_FAILED(nsresult) return in C++).
- *
- * In JS, you can actually cheat, because a thrown exception will cause the
- * CreateInstance call to fail in turn, but not all languages are so lucky.
- * (Though ANSI C++ provides exceptions, they are verboten in Mozilla code
- * for portability reasons -- and even when you're building completely
- * platform-specific code, you can't throw across an XPCOM method boundary.)
- */
-
-
-const DEBUG = false; /* set to true to enable debug messages */
-
-const FILEPICKER_CONTRACTID     = "@mozilla.org/filepicker;1";
-const FILEPICKER_CID        = Components.ID("{54ae32f8-1dd2-11b2-a209-df7c505370f8}");
-const LOCAL_FILE_CONTRACTID = "@mozilla.org/file/local;1";
-const APPSHELL_SERV_CONTRACTID  = "@mozilla.org/appshell/appShellService;1";
-const STRBUNDLE_SERV_CONTRACTID = "@mozilla.org/intl/stringbundle;1";
-
-const nsIAppShellService    = Components.interfaces.nsIAppShellService;
-const nsILocalFile          = Components.interfaces.nsILocalFile;
-const nsIFileURL            = Components.interfaces.nsIFileURL;
-const nsISupports           = Components.interfaces.nsISupports;
-const nsIFactory            = Components.interfaces.nsIFactory;
-const nsIFilePicker         = Components.interfaces.nsIFilePicker;
-const nsIInterfaceRequestor = Components.interfaces.nsIInterfaceRequestor
-const nsIDOMWindow          = Components.interfaces.nsIDOMWindow;
-const nsIStringBundleService = Components.interfaces.nsIStringBundleService;
-const nsIWebNavigation      = Components.interfaces.nsIWebNavigation;
-const nsIDocShellTreeItem   = Components.interfaces.nsIDocShellTreeItem;
-const nsIBaseWindow         = Components.interfaces.nsIBaseWindow;
-
-var   bundle                = null;
-var   lastDirectory         = null;
-
-function nsFilePicker()
-{
-  if (!bundle)
-    bundle = srGetStrBundle("chrome://global/locale/filepicker.properties");
-
-  /* attributes */
-  this.mDefaultString = "";
-  this.mFilterIndex = 0;
-  if (lastDirectory) {
-    this.mDisplayDirectory = Components.classes[LOCAL_FILE_CONTRACTID].createInstance(nsILocalFile);
-    this.mDisplayDirectory.initWithPath(lastDirectory);
-  } else {
-    this.mDisplayDirectory = null;
-  }
-  this.mFilterTitles = new Array();
-  this.mFilters = new Array();
-}
-
-nsFilePicker.prototype = {
-
-  /* attribute nsILocalFile displayDirectory; */
-  set displayDirectory(a) { this.mDisplayDirectory = a; },
-  get displayDirectory()  { return this.mDisplayDirectory; },
-
-  /* readonly attribute nsILocalFile file; */
-  set file(a) { throw "readonly property"; },
-  get file()  { return this.mFilesEnumerator.mFiles[0]; },
-
-  /* readonly attribute nsISimpleEnumerator files; */
-  set files(a) { throw "readonly property"; },
-  get files()  { return this.mFilesEnumerator; },
-
-  /* readonly attribute nsIFileURL fileURL; */
-  set fileURL(a) { throw "readonly property"; },
-  get fileURL()  { 
-    if (this.mFilesEnumerator) {
-      var ioService = Components.classes["@mozilla.org/network/io-service;1"]
-                    .getService(Components.interfaces.nsIIOService);
-      var url       = ioService.newFileURI(this.file);
-      return url;
-    }
-    return null;
-  },
-
-  /* attribute wstring defaultString; */
-  set defaultString(a) { this.mDefaultString = a; },
-  get defaultString()  { return this.mDefaultString; },
-
-  /* attribute wstring defaultExtension */
-  set defaultExtension(ext) { },
-  get defaultExtension() { return ""; },
-  
-  /* attribute long filterIndex; */
-  set filterIndex(a) { this.mFilterIndex = a; },
-  get filterIndex() { return this.mFilterIndex; },
-
-  /* members */
-  mFilesEnumerator: undefined,
-  mParentWindow: null,
-
-  /* methods */
-  init: function(parent, title, mode) {
-    this.mParentWindow = parent;
-    this.mTitle = title;
-    this.mMode = mode;
-  },
-
-  appendFilters: function(filterMask) {
-    if (filterMask & nsIFilePicker.filterHTML) {
-      this.appendFilter(bundle.GetStringFromName("htmlTitle"),
-                   bundle.GetStringFromName("htmlFilter"));
-    }
-    if (filterMask & nsIFilePicker.filterText) {
-      this.appendFilter(bundle.GetStringFromName("textTitle"),
-                   bundle.GetStringFromName("textFilter"));
-    }
-    if (filterMask & nsIFilePicker.filterImages) {
-      this.appendFilter(bundle.GetStringFromName("imageTitle"),
-                   bundle.GetStringFromName("imageFilter"));
-    }
-    if (filterMask & nsIFilePicker.filterXML) {
-      this.appendFilter(bundle.GetStringFromName("xmlTitle"),
-                   bundle.GetStringFromName("xmlFilter"));
-    }
-    if (filterMask & nsIFilePicker.filterXUL) {
-      this.appendFilter(bundle.GetStringFromName("xulTitle"),
-                   bundle.GetStringFromName("xulFilter"));
-    }
-    if (filterMask & nsIFilePicker.filterApps) {
-      // We use "..apps" as a special filter for executable files
-      this.appendFilter(bundle.GetStringFromName("appsTitle"),
-                        "..apps");
-    }
-    if (filterMask & nsIFilePicker.filterAll) {
-      this.appendFilter(bundle.GetStringFromName("allTitle"),
-                   bundle.GetStringFromName("allFilter"));
-    }
-  },
-
-  appendFilter: function(title, extensions) {
-    this.mFilterTitles.push(title);
-    this.mFilters.push(extensions);
-  },
-
-  QueryInterface: function(iid) {
-    if (!iid.equals(nsIFilePicker) &&
-        !iid.equals(nsISupports))
-        throw Components.results.NS_ERROR_NO_INTERFACE;
-    return this;
-  },
-
-  show: function() {
-    var o = new Object();
-    o.title = this.mTitle;
-    o.mode = this.mMode;
-    o.displayDirectory = this.mDisplayDirectory;
-    o.defaultString = this.mDefaultString;
-    o.filterIndex = this.mFilterIndex;
-    o.filters = new Object();
-    o.filters.titles = this.mFilterTitles;
-    o.filters.types = this.mFilters;
-    o.retvals = new Object();
-
-    var parent;
-    if (this.mParentWindow) {
-      parent = this.mParentWindow;
-    } else if (typeof(window) == "object" && window != null) {
-      parent = window;
-    } else {
-      try {
-        var appShellService = Components.classes[APPSHELL_SERV_CONTRACTID].getService(nsIAppShellService);
-        parent = appShellService.hiddenDOMWindow;
-      } catch(ex) {
-        debug("Can't get parent.  xpconnect hates me so we can't get one from the appShellService.\n");
-        debug(ex + "\n");
-      }
-    }
-
-    var parentWin = null;
-    try {
-      parentWin = parent.QueryInterface(nsIInterfaceRequestor)
-                        .getInterface(nsIWebNavigation)
-                        .QueryInterface(nsIDocShellTreeItem)
-                        .treeOwner
-                        .QueryInterface(nsIInterfaceRequestor)
-                        .getInterface(nsIBaseWindow);
-    } catch(ex) {
-      dump("file picker couldn't get base window\n"+ex+"\n");
-    }
-    try {
-      if (parentWin)
-        parentWin.blurSuppression = true;
-      parent.openDialog("chrome://global/content/filepicker.xul",
-                        "",
-                        "chrome,modal,titlebar,resizable=yes,dependent=yes",
-                        o);
-      if (parentWin)
-        parentWin.blurSuppression = false;
-
-      this.mFilterIndex = o.retvals.filterIndex;
-      this.mFilesEnumerator = o.retvals.files;
-      lastDirectory = o.retvals.directory;
-      return o.retvals.buttonStatus;
-    } catch(ex) { dump("unable to open file picker\n" + ex + "\n"); }
-
-    return null;
-  }
-}
-
-if (DEBUG)
-    debug = function (s) { dump("-*- filepicker: " + s + "\n"); }
-else
-    debug = function (s) {}
-
-/* module foo */
-
-var filePickerModule = new Object();
-
-filePickerModule.registerSelf =
-function (compMgr, fileSpec, location, type)
-{
-    debug("registering (all right -- a JavaScript module!)");
-    compMgr = compMgr.QueryInterface(Components.interfaces.nsIComponentRegistrar);
-
-    compMgr.registerFactoryLocation(FILEPICKER_CID, 
-                                    "FilePicker JS Component",
-                                    FILEPICKER_CONTRACTID, 
-                                    fileSpec, 
-                                    location,
-                                    type);
-}
-
-filePickerModule.getClassObject =
-function (compMgr, cid, iid) {
-    if (!cid.equals(FILEPICKER_CID))
-        throw Components.results.NS_ERROR_NO_INTERFACE;
-    
-    if (!iid.equals(Components.interfaces.nsIFactory))
-        throw Components.results.NS_ERROR_NOT_IMPLEMENTED;
-    
-    return filePickerFactory;
-}
-
-filePickerModule.canUnload =
-function(compMgr)
-{
-    debug("Unloading component.");
-    return true;
-}
-    
-/* factory object */
-var filePickerFactory = new Object();
-
-filePickerFactory.createInstance =
-function (outer, iid) {
-    debug("CI: " + iid);
-    debug("IID:" + nsIFilePicker);
-    if (outer != null)
-        throw Components.results.NS_ERROR_NO_AGGREGATION;
-
-    return (new nsFilePicker()).QueryInterface(iid);
-}
-
-/* entrypoint */
-function NSGetModule(compMgr, fileSpec) {
-    return filePickerModule;
-}
-
-
-
-/* crap from strres.js that I want to use for string bundles since I can't include another .js file.... */
-
-var strBundleService = null;
-
-function srGetStrBundle(path)
-{
-  var strBundle = null;
-
-  if (!strBundleService) {
-    try {
-      strBundleService = Components.classes[STRBUNDLE_SERV_CONTRACTID].getService(nsIStringBundleService);
-    } catch (ex) {
-      dump("\n--** strBundleService createInstance failed **--\n");
-      return null;
-    }
-  }
-
-  strBundle = strBundleService.createBundle(path); 
-  if (!strBundle) {
-	dump("\n--** strBundle createInstance failed **--\n");
-  }
-  return strBundle;
-}
-
diff -Nur mozilla-1.7.3/xpfe/components/filepicker/src/nsFilePicker.js.in mozilla-1.7.3-gtkfilechooser/xpfe/components/filepicker/src/nsFilePicker.js.in
--- mozilla-1.7.3/xpfe/components/filepicker/src/nsFilePicker.js.in	2004-03-10 00:33:14.000000000 -0500
+++ mozilla-1.7.3-gtkfilechooser/xpfe/components/filepicker/src/nsFilePicker.js.in	2004-09-27 21:22:14.858739000 -0400
@@ -245,7 +245,11 @@
 
     compMgr.registerFactoryLocation(FILEPICKER_CID, 
                                     "FilePicker JS Component",
+#ifndef MOZ_WIDGET_GTK2
                                     FILEPICKER_CONTRACTID, 
+#else
+                                    "",
+#endif
                                     fileSpec, 
                                     location,
                                     type);
