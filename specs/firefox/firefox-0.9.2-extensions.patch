Index: toolkit/mozapps/extensions/public/nsIExtensionManager.idl
===================================================================
RCS file: /cvsroot/mozilla/toolkit/mozapps/extensions/public/nsIExtensionManager.idl,v
retrieving revision 1.2.6.5
diff -p -u -8 -r1.2.6.5 nsIExtensionManager.idl
--- toolkit/mozapps/extensions/public/nsIExtensionManager.idl	8 Jun 2004 10:09:55 -0000	1.2.6.5
+++ toolkit/mozapps/extensions/public/nsIExtensionManager.idl	13 Jul 2004 10:14:33 -0000
@@ -58,16 +58,18 @@ interface nsIExtensionManager : nsISuppo
 
   /** 
    * Returns true if mismatches were found and the app needs to restart. 
    */
   boolean checkForMismatches();
 
   void handleCommandLineArgs();
 
+  void register();
+
   // Installing Extensions
   const unsigned long FLAG_INSTALL_PROFILE = 0x01;
   const unsigned long FLAG_INSTALL_GLOBAL  = 0x02;
 
   void installExtension(in nsIFile aXPIFile, in unsigned long aFlags);
   void uninstallExtension(in string aExtensionID);
   void enableExtension(in string aExtensionID);
   void disableExtension(in string aExtensionID);
Index: toolkit/mozapps/extensions/src/nsExtensionManager.js.in
===================================================================
RCS file: /cvsroot/mozilla/toolkit/mozapps/extensions/src/nsExtensionManager.js.in,v
retrieving revision 1.5.6.38
diff -p -u -8 -r1.5.6.38 nsExtensionManager.js.in
--- toolkit/mozapps/extensions/src/nsExtensionManager.js.in	13 Jul 2004 08:08:35 -0000	1.5.6.38
+++ toolkit/mozapps/extensions/src/nsExtensionManager.js.in	13 Jul 2004 10:14:38 -0000
@@ -102,17 +102,16 @@ function getDirNoCreate(aKey, aSubDirs)
 {
   return getDirInternal(aKey, aSubDirs, false);
 }
 
 function getDirInternal(aKey, aSubDirs, aCreate)
 {
   var fileLocator = Components.classes["@mozilla.org/file/directory_service;1"]
                               .getService(Components.interfaces.nsIProperties);
-  
   var dir = fileLocator.get(aKey, Components.interfaces.nsIFile);
   for (var i = 0; i < aSubDirs.length; ++i) {
     dir.append(aSubDirs[i]);
     if (aCreate && !dir.exists())
       dir.create(Components.interfaces.nsIFile.DIRECTORY_TYPE, 0755);
   }
   return dir;
 }
@@ -1443,16 +1442,17 @@ function nsExtensionManager()
 
   ensureExtensionsFiles(false);
 }
 
 nsExtensionManager.prototype = {
   _extInstaller     : null,
   _extUninstaller   : null,
   _extEnabler       : null,
+  _started          : false,
   
   /////////////////////////////////////////////////////////////////////////////
   // nsIObserver
   observe: function (aSubject, aTopic, aData)
   {
     switch (aTopic) {
     case "quit-application-requested":
       if (this._downloadCount > 0) {
@@ -1489,16 +1489,18 @@ nsExtensionManager.prototype = {
         PRBool.data = result;
       }
       break;  
     }
   },
   
   start: function (aIsDirty)
   {
+    this._started = true;
+    
     var needsRestart = false;
   
     ensureExtensionsFiles(true);
     
     // Somehow the component list went away, and for that reason the new one
     // generated by this function is going to result in a different compreg.
     // We must force a restart.
     var componentList = getFile(KEY_PROFILEDIR, [FILE_COMPONENT_MANIFEST]);
@@ -1637,16 +1639,33 @@ nsExtensionManager.prototype = {
     var unlocked = cmdLineSvc.getCmdLineValue("-unlock-item");
     if (unlocked) {
       this._ensureDS();
       this._ds.lockUnlockItem(unlocked, false);
     }
     
     this._finishOperations();
   },
+  
+  register: function ()
+  {
+    if (!this._started) {
+      // Loads the datasource and installs any pre-configured items.
+      this._ds = new nsExtensionsDataSource();
+      this._ds.loadExtensions(false);
+      
+      // Write bin/extensions/Extensions.rdf
+      //       bin/extensions/installed-extensions-processed.txt
+      (new nsInstalledExtensionReader(this)).read();
+
+      // Write bin/components.ini
+      var manifest = getFile(KEY_APPDIR, [FILE_COMPONENT_MANIFEST]);
+      this._writeProfileFile(manifest, this._getComponentsDir, false);
+    }
+  },
 
   _cancelDownloads: function ()
   {
     var os = Components.classes["@mozilla.org/observer-service;1"]
                         .getService(Components.interfaces.nsIObserverService);
     for (var i = 0; i < this._transactions.length; ++i)
       os.notifyObservers(this._transactions[i], "xpinstall-progress", "cancel");
     os.removeObserver(this, "offline-requested");
Index: toolkit/xre/nsAppRunner.cpp
===================================================================
RCS file: /cvsroot/mozilla/toolkit/xre/nsAppRunner.cpp,v
retrieving revision 1.27.2.1.4.32
diff -p -u -8 -r1.27.2.1.4.32 nsAppRunner.cpp
--- toolkit/xre/nsAppRunner.cpp	7 Jul 2004 21:39:06 -0000	1.27.2.1.4.32
+++ toolkit/xre/nsAppRunner.cpp	13 Jul 2004 10:14:43 -0000
@@ -1703,16 +1703,22 @@ int xre_main(int argc, char* argv[], con
     NS_ENSURE_SUCCESS(rv, 1);
 
     {
       nsCOMPtr<nsIChromeRegistry> chromeReg
         (do_GetService("@mozilla.org/chrome/chrome-registry;1"));
       NS_ENSURE_TRUE(chromeReg, 1);
 
       chromeReg->CheckForNewChrome();
+
+      nsCOMPtr<nsIExtensionManager> em
+        (do_GetService("@mozilla.org/extensions/manager;1"));
+      NS_ENSURE_TRUE(em, 1);
+
+      em->Register();
     }
     return 0;
   }
 
 #if defined(MOZ_WIDGET_GTK) || defined(MOZ_WIDGET_GTK2)
   // setup for private colormap.  Ideally we'd like to do this
   // in nsAppShell::Create, but we need to get in before gtk
   // has been initialized to make sure everything is running

