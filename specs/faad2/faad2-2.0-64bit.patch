--- faad2/libfaad/decoder.h.~1~	2004-01-05 06:05:11.000000000 -0800
+++ faad2/libfaad/decoder.h	2005-05-04 15:33:45.000000000 -0700
@@ -76,41 +76,41 @@
 #define LFE_CHANNEL          (9)
 #define UNKNOWN_CHANNEL      (0)
 
-int8_t* FAADAPI faacDecGetErrorMessage(uint8_t errcode);
+char* FAADAPI faacDecGetErrorMessage(unsigned char errcode);
 
-uint32_t FAADAPI faacDecGetCapabilities(void);
+unsigned long FAADAPI faacDecGetCapabilities(void);
 
 faacDecHandle FAADAPI faacDecOpen(void);
 
 faacDecConfigurationPtr FAADAPI faacDecGetCurrentConfiguration(faacDecHandle hDecoder);
 
-uint8_t FAADAPI faacDecSetConfiguration(faacDecHandle hDecoder,
+unsigned char FAADAPI faacDecSetConfiguration(faacDecHandle hDecoder,
                                     faacDecConfigurationPtr config);
 
 /* Init the library based on info from the AAC file (ADTS/ADIF) */
-int32_t FAADAPI faacDecInit(faacDecHandle hDecoder,
-                            uint8_t *buffer,
-                            uint32_t buffer_size,
-                            uint32_t *samplerate,
-                            uint8_t *channels);
+long FAADAPI faacDecInit(faacDecHandle hDecoder,
+                            unsigned char *buffer,
+                            unsigned long buffer_size,
+                            unsigned long *samplerate,
+                            unsigned char *channels);
 
 /* Init the library using a DecoderSpecificInfo */
-int8_t FAADAPI faacDecInit2(faacDecHandle hDecoder, uint8_t *pBuffer,
-                         uint32_t SizeOfDecoderSpecificInfo,
-                         uint32_t *samplerate, uint8_t *channels);
+char FAADAPI faacDecInit2(faacDecHandle hDecoder, unsigned char *pBuffer,
+                         unsigned long SizeOfDecoderSpecificInfo,
+                         unsigned long *samplerate, unsigned char *channels);
 
 /* Init the library for DRM */
-int8_t FAADAPI faacDecInitDRM(faacDecHandle hDecoder, uint32_t samplerate,
-                              uint8_t channels);
+char FAADAPI faacDecInitDRM(faacDecHandle hDecoder, unsigned long samplerate,
+                              unsigned char channels);
 
 void FAADAPI faacDecClose(faacDecHandle hDecoder);
 
-void FAADAPI faacDecPostSeekReset(faacDecHandle hDecoder, int32_t frame);
+void FAADAPI faacDecPostSeekReset(faacDecHandle hDecoder, long frame);
 
 void* FAADAPI faacDecDecode(faacDecHandle hDecoder,
                             faacDecFrameInfo *hInfo,
-                            uint8_t *buffer,
-                            uint32_t buffer_size);
+                            unsigned char *buffer,
+                            unsigned long buffer_size);
 
 #ifdef _WIN32
   #pragma pack(pop)
--- faad2/libfaad/mp4.h.~1~	2004-01-05 06:05:12.000000000 -0800
+++ faad2/libfaad/mp4.h	2005-05-04 15:35:54.000000000 -0700
@@ -34,12 +34,12 @@
 
 #include "decoder.h"
 
-int8_t FAADAPI AudioSpecificConfig(uint8_t *pBuffer,
-                                   uint32_t buffer_size,
+char FAADAPI AudioSpecificConfig(unsigned char *pBuffer,
+				 unsigned long buffer_size,
                                    mp4AudioSpecificConfig *mp4ASC);
 
-int8_t FAADAPI AudioSpecificConfig2(uint8_t *pBuffer,
-                                    uint32_t buffer_size,
+char FAADAPI AudioSpecificConfig2(unsigned char *pBuffer,
+                                  unsigned long buffer_size,
                                     mp4AudioSpecificConfig *mp4ASC,
                                     program_config *pce);
 
--- faad2/libfaad/mp4.c.~1~	2004-01-05 06:05:12.000000000 -0800
+++ faad2/libfaad/mp4.c	2005-05-04 15:57:14.000000000 -0700
@@ -119,15 +119,15 @@
 };
 
 /* Table 1.6.1 */
-int8_t FAADAPI AudioSpecificConfig(uint8_t *pBuffer,
-                                   uint32_t buffer_size,
+char FAADAPI AudioSpecificConfig(unsigned char *pBuffer,
+                                   unsigned long buffer_size,
                                    mp4AudioSpecificConfig *mp4ASC)
 {
     return AudioSpecificConfig2(pBuffer, buffer_size, mp4ASC, NULL);
 }
 
-int8_t FAADAPI AudioSpecificConfig2(uint8_t *pBuffer,
-                                    uint32_t buffer_size,
+char FAADAPI AudioSpecificConfig2(unsigned char *pBuffer,
+                                    unsigned long buffer_size,
                                     mp4AudioSpecificConfig *mp4ASC,
                                     program_config *pce)
 {
--- faad2/libfaad/structs.h.~1~	2004-01-29 03:31:11.000000000 -0800
+++ faad2/libfaad/structs.h	2005-05-04 15:40:18.000000000 -0700
@@ -307,58 +307,58 @@
 typedef struct mp4AudioSpecificConfig
 {
     /* Audio Specific Info */
-    uint8_t objectTypeIndex;
-    uint8_t samplingFrequencyIndex;
-    uint32_t samplingFrequency;
-    uint8_t channelsConfiguration;
+    unsigned char objectTypeIndex;
+    unsigned char samplingFrequencyIndex;
+    unsigned long samplingFrequency;
+    unsigned char channelsConfiguration;
 
     /* GA Specific Info */
-    uint8_t frameLengthFlag;
-    uint8_t dependsOnCoreCoder;
-    uint16_t coreCoderDelay;
-    uint8_t extensionFlag;
-    uint8_t aacSectionDataResilienceFlag;
-    uint8_t aacScalefactorDataResilienceFlag;
-    uint8_t aacSpectralDataResilienceFlag;
-    uint8_t epConfig;
+    unsigned char frameLengthFlag;
+    unsigned char dependsOnCoreCoder;
+    unsigned short coreCoderDelay;
+    unsigned char extensionFlag;
+    unsigned char aacSectionDataResilienceFlag;
+    unsigned char aacScalefactorDataResilienceFlag;
+    unsigned char aacSpectralDataResilienceFlag;
+    unsigned char epConfig;
 
-    int8_t sbr_present_flag;
-    int8_t forceUpSampling;
+    char sbr_present_flag;
+    char forceUpSampling;
 } mp4AudioSpecificConfig;
 
 typedef struct faacDecConfiguration
 {
-    uint8_t defObjectType;
-    uint32_t defSampleRate;
-    uint8_t outputFormat;
-    uint8_t downMatrix;
-    uint8_t useOldADTSFormat;
-    uint8_t dontUpSampleImplicitSBR;
+    unsigned char defObjectType;
+    unsigned long defSampleRate;
+    unsigned char outputFormat;
+    unsigned char downMatrix;
+    unsigned char useOldADTSFormat;
+    unsigned char dontUpSampleImplicitSBR;
 } faacDecConfiguration, *faacDecConfigurationPtr;
 
 typedef struct faacDecFrameInfo
 {
-    uint32_t bytesconsumed;
-    uint32_t samples;
-    uint8_t channels;
-    uint8_t error;
-    uint32_t samplerate;
+    unsigned long bytesconsumed;
+    unsigned long samples;
+    unsigned char channels;
+    unsigned char error;
+    unsigned long samplerate;
 
     /* SBR: 0: off, 1: on; normal, 2: on; downsampled */
-    uint8_t sbr;
+    unsigned char sbr;
 
     /* MPEG-4 ObjectType */
-    uint8_t object_type;
+    unsigned char object_type;
 
     /* AAC header type; MP4 will be signalled as RAW also */
-    uint8_t header_type;
+    unsigned char header_type;
 
     /* multichannel configuration */
-    uint8_t num_front_channels;
-    uint8_t num_side_channels;
-    uint8_t num_back_channels;
-    uint8_t num_lfe_channels;
-    uint8_t channel_position[MAX_CHANNELS];
+    unsigned char num_front_channels;
+    unsigned char num_side_channels;
+    unsigned char num_back_channels;
+    unsigned char num_lfe_channels;
+    unsigned char channel_position[64];
 } faacDecFrameInfo;
 
 typedef struct
--- faad2/libfaad/decoder.c.~1~	2004-02-04 12:07:24.000000000 -0800
+++ faad2/libfaad/decoder.c	2005-05-04 15:54:56.000000000 -0700
@@ -50,14 +50,14 @@
 uint16_t dbg_count;
 #endif
 
-int8_t* FAADAPI faacDecGetErrorMessage(uint8_t errcode)
+char* FAADAPI faacDecGetErrorMessage(unsigned char errcode)
 {
     if (errcode >= NUM_ERROR_MESSAGES)
         return NULL;
     return err_msg[errcode];
 }
 
-uint32_t FAADAPI faacDecGetCapabilities(void)
+unsigned long FAADAPI faacDecGetCapabilities(void)
 {
     uint32_t cap = 0;
 
@@ -190,9 +190,9 @@
     return 0;
 }
 
-int32_t FAADAPI faacDecInit(faacDecHandle hDecoder, uint8_t *buffer,
-                            uint32_t buffer_size,
-                            uint32_t *samplerate, uint8_t *channels)
+long FAADAPI faacDecInit(faacDecHandle hDecoder, unsigned char *buffer,
+                            unsigned long buffer_size,
+                            unsigned long *samplerate, unsigned char *channels)
 {
     uint32_t bits = 0;
     bitfile ld;
@@ -284,9 +284,9 @@
 }
 
 /* Init the library using a DecoderSpecificInfo */
-int8_t FAADAPI faacDecInit2(faacDecHandle hDecoder, uint8_t *pBuffer,
-                            uint32_t SizeOfDecoderSpecificInfo,
-                            uint32_t *samplerate, uint8_t *channels)
+char FAADAPI faacDecInit2(faacDecHandle hDecoder, unsigned char *pBuffer,
+                            unsigned long SizeOfDecoderSpecificInfo,
+                            unsigned long *samplerate, unsigned char *channels)
 {
     int8_t rc;
     mp4AudioSpecificConfig mp4ASC;
@@ -366,8 +366,8 @@
 }
 
 #ifdef DRM
-int8_t FAADAPI faacDecInitDRM(faacDecHandle hDecoder, uint32_t samplerate,
-                              uint8_t channels)
+char FAADAPI faacDecInitDRM(faacDecHandle hDecoder, unsigned long samplerate,
+                              unsigned char channels)
 {
     uint8_t i;
 
@@ -512,7 +512,7 @@
     if (hDecoder) faad_free(hDecoder);
 }
 
-void FAADAPI faacDecPostSeekReset(faacDecHandle hDecoder, int32_t frame)
+void FAADAPI faacDecPostSeekReset(faacDecHandle hDecoder, long frame)
 {
     if (hDecoder)
     {
@@ -730,7 +730,7 @@
 
 void* FAADAPI faacDecDecode(faacDecHandle hDecoder,
                             faacDecFrameInfo *hInfo,
-                            uint8_t *buffer, uint32_t buffer_size)
+                            unsigned char *buffer, unsigned long buffer_size)
 {
     uint8_t channels = 0;
     uint8_t output_channels = 0;
