--- rsync-2.5.4/io.c.moresignage	Mon Feb 18 20:41:20 2002
+++ rsync-2.5.4/io.c	Wed Mar 13 17:18:08 2002
@@ -458,7 +458,7 @@
 				 * across the stream */
 				io_multiplexing_close();
 				rprintf(FERROR, RSYNC_NAME
-					": error writing %d unbuffered bytes"
+					": error writing %lu unbuffered bytes"
 					" - exiting: %s\n", len,
 					strerror(errno));
 				exit_cleanup(RERR_STREAMIO);
@@ -563,7 +563,7 @@
 	}
 
 	while (len) {
-		int n = MIN((int) len, IO_BUFFER_SIZE-io_buffer_count);
+		int n = MIN((ssize_t) len, IO_BUFFER_SIZE-io_buffer_count);
 		if (n > 0) {
 			memcpy(io_buffer+io_buffer_count, buf, n);
 			buf += n;
--- rsync-2.5.4/match.c.moresignage	Sat Feb  2 20:38:39 2002
+++ rsync-2.5.4/match.c	Wed Mar 13 17:19:36 2002
@@ -141,9 +141,9 @@
 	last_i = -1;
 
 	if (verbose > 2)
-		rprintf(FINFO,"hash search b=%d len=%.0f\n",s->n,(double)len);
+		rprintf(FINFO,"hash search b=%lu len=%.0f\n",s->n,(double)len);
 
-	k = MIN(len, s->n);
+	k = MIN(len, (ssize_t)s->n);
 	
 	map = (schar *)map_ptr(buf,0,k);
 	
@@ -158,7 +158,7 @@
 	end = len + 1 - s->sums[s->count-1].len;
 	
 	if (verbose > 3)
-		rprintf(FINFO,"hash search s->n=%d len=%.0f count=%d\n",
+		rprintf(FINFO,"hash search s->n=%lu len=%.0f count=%lu\n",
 			s->n,(double)len,s->count);
 	
 	do {
@@ -175,13 +175,13 @@
 
 		sum = (s1 & 0xffff) | (s2 << 16);
 		tag_hits++;
-		for (; j < (int) s->count && targets[j].t == t; j++) {
+		for (; j < (ssize_t) s->count && targets[j].t == t; j++) {
 			int l, i = targets[j].i;
 			
 			if (sum != s->sums[i].sum1) continue;
 			
 			/* also make sure the two blocks are the same length */
-			l = MIN(s->n,len-offset);
+			l = MIN((ssize_t)s->n,len-offset);
 			if (l != s->sums[i].len) continue;			
 
 			if (verbose > 3)
@@ -201,7 +201,7 @@
 
 			/* we've found a match, but now check to see
                            if last_i can hint at a better match */
-			for (j++; j < (int) s->count && targets[j].t == t; j++) {
+			for (j++; j < (ssize_t) s->count && targets[j].t == t; j++) {
 				int i2 = targets[j].i;
 				if (i2 == last_i + 1) {
 					if (sum != s->sums[i2].sum1) break;
@@ -217,7 +217,7 @@
 			
 			matched(f,s,buf,offset,i);
 			offset += s->sums[i].len - 1;
-			k = MIN((len-offset), s->n);
+			k = MIN((len-offset), (ssize_t)s->n);
 			map = (schar *)map_ptr(buf,offset,k);
 			sum = get_checksum1((char *)map, k);
 			s1 = sum & 0xFFFF;
@@ -247,7 +247,7 @@
 		   running match, the checksum update and the
 		   literal send. */
 		if (offset > last_match &&
-		    offset-last_match >= CHUNK_SIZE+s->n && 
+		    offset-last_match >= (ssize_t)(CHUNK_SIZE+s->n) && 
 		    (end-offset > CHUNK_SIZE)) {
 			matched(f,s,buf,offset - s->n, -2);
 		}
--- rsync-2.5.4/sender.c.moresignage	Fri Jan 25 18:07:33 2002
+++ rsync-2.5.4/sender.c	Wed Mar 13 17:14:54 2002
@@ -46,7 +46,7 @@
 	s->sums = NULL;
 
 	if (verbose > 3)
-		rprintf(FINFO,"count=%d n=%d rem=%d\n",
+		rprintf(FINFO,"count=%lu n=%lu rem=%lu\n",
 			s->count,s->n,s->remainder);
 
 	if (s->count == 0) 
