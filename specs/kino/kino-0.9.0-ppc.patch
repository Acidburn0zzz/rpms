Index: src/frame.h
===================================================================
RCS file: /cvsroot/kino/kino/src/frame.h,v
retrieving revision 1.34
diff -u -p -r1.34 frame.h
--- src/frame.h	21 May 2006 22:59:57 -0000	1.34
+++ src/frame.h	7 Jul 2006 06:27:38 -0000
@@ -313,7 +313,7 @@ public:
 	}
 	void Resample( input_t *input, double input_rate, int channels, int samples )
 	{
-		src_short_to_float_array( input, input_buffer, samples * channels );
+		src_short_to_float_array( (short int *)input, input_buffer, samples * channels );
 
 		// Setup resampler
 		data.input_frames = samples;
@@ -328,7 +328,7 @@ public:
 
 // cerr << "Resample in samples " << samples << " out rate " << this->output_rate << " in rate " << input_rate << " src_ratio " << data.src_ratio << "out samples " << this->size/4 << endl;
 
-		src_float_to_short_array( output_buffer, this->output, data.output_frames_gen * channels );
+		src_float_to_short_array( output_buffer, (short int *)this->output, data.output_frames_gen * channels );
 	}
 
 private:
@@ -484,7 +484,7 @@ public:
 				m_frame.GetAudioInfo( m_info );
 				if ( m_rate != m_info.frequency )
 				{
-					src_short_to_float_array( m_input, m_internalInput, n * m_channels );
+					src_short_to_float_array( (short int *)m_input, m_internalInput, n * m_channels );
 					m_srcdata.input_frames = n;
 					m_srcdata.src_ratio = m_rate / m_info.frequency;
 					m_srcdata.end_of_input = (m_position > m_end );
@@ -493,7 +493,7 @@ public:
 				}
 				else
 				{
-					src_short_to_float_array( m_input, m_internalConformed, n * m_channels );
+					src_short_to_float_array( (short int *)m_input, m_internalConformed, n * m_channels );
 					output_frames = n;
 				}
 			}
@@ -513,7 +513,7 @@ public:
 	{
 		int out_samples = src_callback_read( m_state, rate / m_rate, samples, m_internalOutput );
 // cerr << "AsyncAudioResample::Process rate " << rate << " req samples " << samples << " out samples " << out_samples << endl;
-		src_float_to_short_array( m_internalOutput, m_output, out_samples * m_channels );
+		src_float_to_short_array( m_internalOutput, (short int *)m_output, out_samples * m_channels );
 		return out_samples;
 	}
 
Index: src/page_export_audio.cc
===================================================================
RCS file: /cvsroot/kino/kino/src/page_export_audio.cc,v
retrieving revision 1.25
diff -u -p -r1.25 page_export_audio.cc
--- src/page_export_audio.cc	21 May 2006 22:59:57 -0000	1.25
+++ src/page_export_audio.cc	7 Jul 2006 06:27:38 -0000
@@ -215,7 +215,7 @@ ExportAudio::doExport( PlayList * playli
 
 				int requestedSamples = frame.CalculateNumberSamples( resampleRate, j );
 				int nsamples = resampler->Process( adjustedRate, requestedSamples );
-				if ( nsamples > 0 && !outputPipe->OutputAudioFrame( resampler->GetOutput(), nsamples * channels * sizeof(int16_t) ) )
+				if ( nsamples > 0 && !outputPipe->OutputAudioFrame( (int16_t *)resampler->GetOutput(), nsamples * channels * sizeof(int16_t) ) )
 				{
 					modal_message( _( "Error during audio export - aborting." ) );
 					status = EXPORT_RESULT_FAILURE;
