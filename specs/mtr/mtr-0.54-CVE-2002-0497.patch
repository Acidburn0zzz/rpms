This patch (modified by Robert Scheck <redhat@linuxnetz.de>) is originally
from SuSE but also used at PLD and fixes CVE-2002-0497, which is a buffer 
overflow in mtr 0.46 and earlier, when installed setuid root, allows local
users to access a raw socket via a long MTR_OPTIONS environment variable.

Fedora Core's mtr hasn't per default setuid root, but the users/admins
maybe change that and then, mtr is vulnerable.

http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0497
http://lists.debian.org/debian-security-announce/debian-security-announce-2002/msg00034.html

--- mtr-0.54/dns.c			2004-08-07 14:25:39.000000000 +0200
+++ mtr-0.54/dns.c.CVE-2002-0497	2004-08-07 14:21:41.000000000 +0200
@@ -882,7 +882,7 @@
    if (type == T_A || type == T_AAAA) {
       dorequest(rp->hostname,type,rp->id);
       if (debug){
-         sprintf(tempstring,"Resolver: Sent reverse authentication request for \"%s\".",
+         snprintf(tempstring, sizeof(tempstring),"Resolver: Sent reverse authentication request for \"%s\".",
           rp->hostname);
          restell(tempstring);
       }
@@ -890,7 +890,7 @@
       ptrstring4(rp->ip, tempstring, sizeof(tempstring));
       dorequest(tempstring,type,rp->id);
       if (debug){
-         sprintf(tempstring,"Resolver: Sent domain lookup request for \"%s\".",
+         snprintf(tempstring, sizeof(tempstring),"Resolver: Sent domain lookup request for \"%s\".",
           strlongip(rp->ip));
          restell(tempstring);
       }
@@ -933,7 +933,7 @@
    rp->expiretime = sweeptime + (double)ttl;
    untieresolve(rp);
    if (debug){
-      sprintf(tempstring,"Resolver: Lookup successful: %s\n",rp->hostname);
+      snprintf(tempstring, sizeof(tempstring),"Resolver: Lookup successful: %s\n",rp->hostname);
       restell(tempstring);
    }
 }
@@ -987,7 +987,7 @@
       case NOERROR:
          if (hp->ancount){
             if (debug){
-               sprintf(tempstring,"Resolver: Received nameserver reply. (qd:%u an:%u ns:%u ar:%u)",
+               snprintf(tempstring, sizeof(tempstring),"Resolver: Received nameserver reply. (qd:%u an:%u ns:%u ar:%u)",
                 hp->qdcount,hp->ancount,hp->nscount,hp->arcount);
                restell(tempstring);
             }
@@ -1022,14 +1022,14 @@
             namestring[strlen(stackstring)] = '\0';
             if (strcasecmp(stackstring,namestring)){
                if (debug){
-                  sprintf(tempstring,"Resolver: Unknown query packet dropped. (\"%s\" does not match \"%s\")",
+                  snprintf(tempstring, sizeof(tempstring),"Resolver: Unknown query packet dropped. (\"%s\" does not match \"%s\")",
                    stackstring,namestring);
                   restell(tempstring);
                }
                return;
             }
             if (debug){
-               sprintf(tempstring,"Resolver: Queried domain name: \"%s\"",namestring);
+               snprintf(tempstring, sizeof(tempstring),"Resolver: Queried domain name: \"%s\"",namestring);
                restell(tempstring);
             }
             c+= r;
@@ -1040,7 +1040,7 @@
             qdatatype = sucknetword(c);
             qclass = sucknetword(c);
             if (qclass != C_IN){
-               sprintf(tempstring,"Resolver error: Received unsupported query class: %u (%s)",
+               snprintf(tempstring, sizeof(tempstring),"Resolver error: Received unsupported query class: %u (%s)",
                 qclass,qclass < ClasstypeCount ? classtypes[qclass] :
                  classtypes[ClasstypeCount]);
                restell(tempstring);
@@ -1054,7 +1054,7 @@
                      }
                   break;
                default:
-                  sprintf(tempstring,"Resolver error: Received unimplemented query type: %u (%s)",
+                  snprintf(tempstring, sizeof(tempstring),"Resolver error: Received unimplemented query type: %u (%s)",
                    qdatatype,qdatatype < ResourcetypeCount ?
                     resourcetypes[qdatatype] : resourcetypes[ResourcetypeCount]);
                   restell(tempstring);
@@ -1076,7 +1076,7 @@
                else
                   usefulanswer = 1;
                if (debug){
-                  sprintf(tempstring,"Resolver: answered domain query: \"%s\"",namestring);
+                  snprintf(tempstring, sizeof(tempstring),"Resolver: answered domain query: \"%s\"",namestring);
                   restell(tempstring);
                }
                c+= r;
@@ -1089,10 +1089,10 @@
                ttl = sucknetlong(c);
                rdatalength = sucknetword(c);
                if (class != qclass){
-                  sprintf(tempstring,"query class: %u (%s)",qclass,qclass < ClasstypeCount ?
+                  snprintf(tempstring, sizeof(tempstring),"query class: %u (%s)",qclass,qclass < ClasstypeCount ?
                    classtypes[qclass] : classtypes[ClasstypeCount]);
                   restell(tempstring);
-                  sprintf(tempstring,"rr class: %u (%s)",class,class < ClasstypeCount ?
+                  snprintf(tempstring, sizeof(tempstring),"rr class: %u (%s)",class,class < ClasstypeCount ?
                    classtypes[class] : classtypes[ClasstypeCount]);
                   restell(tempstring);
                   restell("Resolver error: Answered class does not match queried class.");
@@ -1108,20 +1108,20 @@
                }
                if (datatype == qdatatype || datatype == T_CNAME){
                   if (debug){
-                     sprintf(tempstring,"Resolver: TTL: %s",strtdiff(sendstring,ttl));
+                     snprintf(tempstring, sizeof(tempstring),"Resolver: TTL: %s",strtdiff(sendstring,ttl));
                      restell(tempstring);
                   }
                   if (usefulanswer)
                      switch (datatype){
                         case T_A:
                            if (rdatalength != 4){
-                              sprintf(tempstring,"Resolver error: Unsupported rdata format for \"A\" type. (%u bytes)",
+                              snprintf(tempstring, sizeof(tempstring),"Resolver error: Unsupported rdata format for \"A\" type. (%u bytes)",
                                rdatalength);
                               restell(tempstring);
                               return;
                            }
                            if (memcmp(&rp->ip,(ip_t *)c,sizeof(ip_t))){
-                              sprintf(tempstring,"Resolver: Reverse authentication failed: %s != ",
+                              snprintf(tempstring, sizeof(tempstring),"Resolver: Reverse authentication failed: %s != ",
                                strlongip(rp->ip));
                               memcpy(&alignedip,(ip_t *)c,sizeof(ip_t));
                               strcat(tempstring,strlongip(alignedip.s_addr));
@@ -1129,7 +1129,7 @@
                               res_hostipmismatch++;
                               failrp(rp);
                            } else {
-                              sprintf(tempstring,"Resolver: Reverse authentication complete: %s == \"%s\".",
+                              snprintf(tempstring, sizeof(tempstring),"Resolver: Reverse authentication complete: %s == \"%s\".",
                                strlongip(rp->ip),nonull(rp->hostname));
                               restell(tempstring);
                               res_reversesuccess++;
@@ -1146,7 +1146,7 @@
                               return;
                            }
                            if (debug){
-                              sprintf(tempstring,"Resolver: Answered domain: \"%s\"",namestring);
+                              snprintf(tempstring, sizeof(tempstring),"Resolver: Answered domain: \"%s\"",namestring);
                               restell(tempstring);
                            }
                            if (r > HostnameLength){
@@ -1171,14 +1171,14 @@
                            }
                            break;
                         default:
-                           sprintf(tempstring,"Resolver error: Received unimplemented data type: %u (%s)",
+                           snprintf(tempstring, sizeof(tempstring),"Resolver error: Received unimplemented data type: %u (%s)",
                             datatype,datatype < ResourcetypeCount ?
                              resourcetypes[datatype] : resourcetypes[ResourcetypeCount]);
                            restell(tempstring);
                      }
                } else {
                   if (debug){
-                     sprintf(tempstring,"Resolver: Ignoring resource type %u. (%s)",
+                     snprintf(tempstring, sizeof(tempstring),"Resolver: Ignoring resource type %u. (%s)",
                       datatype,datatype < ResourcetypeCount ?
                        resourcetypes[datatype] : resourcetypes[ResourcetypeCount]);
                      restell(tempstring);
@@ -1202,7 +1202,7 @@
          failrp(rp);
          break;
       default:
-         sprintf(tempstring,"Resolver: Received error response %u. (%s)",
+         snprintf(tempstring, sizeof(tempstring),"Resolver: Received error response %u. (%s)",
           getheader_rcode(hp),getheader_rcode(hp) < ResponsecodeCount ?
            responsecodes[getheader_rcode(hp)] : responsecodes[ResponsecodeCount]);
          restell(tempstring);
@@ -1225,13 +1225,13 @@
             if (_res.nsaddr_list[i].sin_addr.s_addr == from.sin_addr.s_addr)
                break;
       if (i == _res.nscount){
-         sprintf(tempstring,"Resolver error: Received reply from unknown source: %s",
+         snprintf(tempstring, sizeof(tempstring),"Resolver error: Received reply from unknown source: %s",
           strlongip(from.sin_addr.s_addr));
          restell(tempstring);
       } else
          parserespacket((byte *)resrecvbuf,r);
    } else {
-      sprintf(tempstring,"Resolver: Socket error: %s",strerror(errno));
+      snprintf(tempstring, sizeof(tempstring),"Resolver: Socket error: %s",strerror(errno));
       restell(tempstring);
    }
 }
@@ -1255,7 +1255,7 @@
          case STATE_FINISHED:	/* TTL has expired */
          case STATE_FAILED:	/* Fake TTL has expired */
             if (debug){
-               sprintf(tempstring,"Resolver: Cache record for \"%s\" (%s) has expired. (state: %u)  Marked for expire at: %g, time: %g.",
+               snprintf(tempstring, sizeof(tempstring),"Resolver: Cache record for \"%s\" (%s) has expired. (state: %u)  Marked for expire at: %g, time: %g.",
                 nonull(rp->hostname),strlongip(rp->ip),rp->state,rp->expiretime,sweeptime);
                restell(tempstring);
             }
@@ -1307,14 +1307,14 @@
       if ((rp->state == STATE_FINISHED) || (rp->state == STATE_FAILED)){
          if ((rp->state == STATE_FINISHED) && (rp->hostname)){
             if (debug){
-               sprintf(tempstring,"Resolver: Used cached record: %s == \"%s\".\n",
+               snprintf(tempstring, sizeof(tempstring),"Resolver: Used cached record: %s == \"%s\".\n",
                 satostr(sa),rp->hostname);
                restell(tempstring);
             }
             return rp->hostname;
          } else {
             if (debug){
-               sprintf(tempstring,"Resolver: Used failed record: %s == ???\n",
+               sprintf(tempstring, sizeof(tempstring),"Resolver: Used failed record: %s == ???\n",
                 satostr(sa));
                restell(tempstring);
             }
--- mtr-0.54/mtr.c			2004-08-07 14:25:39.000000000 +0200
+++ mtr-0.54/mtr.c.CVE-2002-0497	2004-08-07 14:13:35.000000000 +0200
@@ -192,13 +192,13 @@
   net_preopen_result = net_preopen ();
 
   /*  Now drop to user permissions  */
-  if(setuid(getuid())) {
+  if(setgid(getgid()) || setuid(getuid())) {
     printf("mtr: Unable to drop permissions.\n");
     exit(1);
   }
 
   /*  Double check, just in case  */
-  if(geteuid() != getuid()) {
+  if(geteuid() != getuid() || getegid() != getgid()) {
     printf("mtr: Unable to drop permissions.\n");
     exit(1);
   }
--- mtr-0.54/split.c			2004-08-07 14:25:39.000000000 +0200
+++ mtr-0.54/split.c.CVE-2002-0497	2004-08-07 14:18:48.000000000 +0200
@@ -105,7 +105,7 @@
       name = dns_lookup((struct sockaddr *)addr);
       if(name != NULL) {
 	/* May be we should test name's length */
-	sprintf(newLine, "%s %d %d %d %d %d %d", name,
+	snprintf(newLine, sizeof(newLine), "%s %d %d %d %d %d %d", name,
 		net_percent(at),
 		net_returned(at), net_xmit(at),
 		net_best(at) /1000, net_avg(at)/1000, 
@@ -118,7 +118,7 @@
 			addr->sa_len,
 #endif
 			hbuf, sizeof(hbuf), NULL, 0, NI_NUMERICHOST);
-	sprintf(newLine, "%s %d %d %d %d %d %d", 
+	snprintf(newLine, sizeof(newLine), "%s %d %d %d %d %d %d", 
 		hbuf,
 		net_percent(at),
 		net_returned(at), net_xmit(at),
